Precedence_and_associativity.txt

Precedence and Associativity in Java
When evaluating expressions, Java follows specific rules to decide which operators execute first. These rules are called Operator Precedence and Associativity.
ðŸ”¹ 1. Operator Precedence
Operator precedence determines which operator is executed first in an expression that contains multiple operators.

âœ… Example:
int result = 10 + 2 * 5;  
System.out.println(result);
Output:t
20
ðŸ”¹ Why?
* (Multiplication) has higher precedence than + (Addition).
So, 2 * 5 is calculated first â†’ 10 + 10 = 20.


2. Operator Associativity
When two operators have the same precedence, Java follows associativity rules:

Left to Right associativity (most cases).
Right to Left associativity (for assignment and unary operators).
âœ… Example (Left to Right Associativity):
int result = 100 / 5 * 2;
System.out.println(result);
Output:
40
ðŸ”¹ Why?

/ and * have equal precedence.
Left to Right execution:
100 / 5 = 20 â†’ 20 * 2 = 40.
âœ… Example (Right to Left Associativity - Assignment):
int a, b, c;
a = b = c = 10;
System.out.println(a + " " + b + " " + c);
Output:
10 10 10
ðŸ”¹ Why?

= (assignment) has Right to Left associativity.
So, c = 10 â†’ b = c â†’ a = b.


Operator Precedence Table
Precedence	        Operator	            Associativity	Example
1 (Highest)	        () [] .	                Left to Right	a[0], obj.method()
2	                ++ -- + - ! ~	        Right to Left	++a, !flag
3	                * / %	                Left to Right	a * b, x % y
4	                + -	                    Left to Right	a + b, x - y
5	                << >> >>>	            Left to Right	a << 2, b >> 3
6	                < <= > >=	            Left to Right	a > b, x <= y
7	                == !=	                Left to Right	a == b, x != y
8	                &	                    Left to Right	a & b
9	                ^	                    Left to Right	a ^ b
10	                `	`	                Left to Right
11	                &&	                    Left to Right	a && b
12	                `		                    `
13	                ? :	                    Right to Left	a > b ? x : y
14	                = += -= *= /= %=	    Right to Left	a += b, x *= y
15 (Lowest)	        ,	                    Left to Right	a++, b++