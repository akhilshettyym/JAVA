Strings in Java
A String in Java is a sequence of characters enclosed in double quotes (""). Java provides a String class that is immutable, meaning once a string is created, it cannot be changed.

1Ô∏è‚É£ Creating Strings in Java
There are two ways to create strings:

(i) Using String Literal
String str1 = "Hello";
‚úÖ This method stores the string in the String Pool (a special memory area in the heap). If another variable is assigned "Hello", it refers to the same object, saving memory.

(ii) Using new Keyword
String str2 = new String("Hello");
‚úÖ This method creates a new string object in the Heap Memory, even if the same string exists in the string pool.
üîπ Example:
public class StringExample {
    public static void main(String[] args) {
        String s1 = "Hello";
        String s2 = new String("Hello");

        System.out.println(s1); // Output: Hello
        System.out.println(s2); // Output: Hello
    }
}



2Ô∏è‚É£ String Methods in Java
Java provides various built-in methods to work with strings.

Method	Description	Example (String s = "Java Programming";)	Output
length()	            Returns string length	s.length()	16
charAt(index)	        Returns character at a given index	s.charAt(5)	'P'
concat(str)	            Concatenates two strings	s.concat(" is fun")	"Java Programming is fun"
toUpperCase()	        Converts string to uppercase	s.toUpperCase()	"JAVA PROGRAMMING"
toLowerCase()	        Converts string to lowercase	s.toLowerCase()	"java programming"
trim()	                Removes leading and trailing spaces	" Hello ".trim()	"Hello"
substring(start, end)	Extracts part of the string	s.substring(5, 16)	"Programming"
replace(old, new)	    Replaces characters	s.replace("Java", "Python")	"Python Programming"
equals(str)	            Checks if two strings are equal	"Java".equals("java")	false
equalsIgnoreCase(str)	Compares strings, ignoring case	"Java".equalsIgnoreCase("java")	true
contains(str)	        Checks if a string contains another	s.contains("Pro")	true
startsWith(str)	        Checks if a string starts with a substring	s.startsWith("Java")	true
endsWith(str)	        Checks if a string ends with a substring	s.endsWith("ing")	true
indexOf(char)	        Finds first occurrence of a character	s.indexOf('a')	1
lastIndexOf(char)	    Finds last occurrence of a character	s.lastIndexOf('a')	3
split(regex)	        Splits string into an array	s.split(" ")	["Java", "Programming"]



3Ô∏è‚É£ String Comparison in Java
There are three ways to compare strings in Java:

(i) Using == Operator (Reference Comparison)
String s1 = "Hello";
String s2 = "Hello";
System.out.println(s1 == s2); // true (same memory reference)

String s3 = new String("Hello");
System.out.println(s1 == s3); // false (different objects in memory)
(ii) Using equals() Method (Content Comparison)
String s1 = "Hello";
String s2 = new String("Hello");

System.out.println(s1.equals(s2)); // true (checks content, not reference)
(iii) Using compareTo() Method (Lexicographical Comparison)
Returns:

0 if strings are equal
Negative value if first string is smaller
Positive value if first string is greater
String s1 = "Apple";
String s2 = "Banana";
System.out.println(s1.compareTo(s2)); // Negative value (-1) because "Apple" < "Banana"



4Ô∏è‚É£ String Buffer and String Builder (Mutable Strings)
Since Java String is immutable, StringBuffer and StringBuilder are used for mutable (modifiable) strings.

Feature	StringBuffer	StringBuilder
Mutability	Mutable	Mutable
Thread-Safety	Yes (Synchronized)	No
Performance	Slower	Faster
Example:
StringBuffer sb = new StringBuffer("Hello");
sb.append(" World");
System.out.println(sb); // Output: Hello World
StringBuilder sb = new StringBuilder("Hello");
sb.append(" World");
System.out.println(sb); // Output: Hello World



5Ô∏è‚É£ Converting Other Data Types to Strings
Method	Example	Output
String.valueOf(int)	String s = String.valueOf(123);	"123"
Integer.toString(int)	String s = Integer.toString(456);	"456"
Double.toString(double)	String s = Double.toString(3.14);	"3.14"
‚úÖ Example:
int num = 100;
String str = String.valueOf(num);
System.out.println(str); // Output: "100"



6Ô∏è‚É£ Converting Strings to Other Data Types
Method	Example	Output
Integer.parseInt(str)	int num = Integer.parseInt("123");	123
Double.parseDouble(str)	double d = Double.parseDouble("3.14");	3.14
‚úÖ Example:
String numStr = "200";
int num = Integer.parseInt(numStr);
System.out.println(num); // Output: 200

String Basics
Strings in java is a sequence of characters that Is enclosed in double quotes. Whenever java comes across a String literal in the code, it creates a string literal with the value of string.

Example:

public class string {
    public static void main(String[] args) {
        String name;
        name = "Diablo";
        System.out.println("My name is " + name);
    }
}
Output:

My name is Diablo
 

The same can be done using an array of characters.

Example:

public class string {
    public static void main(String[] args) {
        char[] name = {'D', 'i', 'a', 'b', 'l', 'o'};
        String welcomeMsg = new String(name);  
        System.out.println("Welcome " + welcomeMsg);
    }
}
Output:
Welcome Diablo
Concatenate Strings:
Concatenation between two strings in java is done using the + operator.

Example:
public class string {
    public static void main(String[] args) {
        String fname, lname;
        fname = "Diablo";
        lname = "Ramirez";
        System.out.println(fname + " " + lname);
    }
}
Output:
Diablo Ramirez
 

Alternatively, we can use the concat() method to concatenate two strings.
Example:
public class string {
    public static void main(String[] args) {
        String fname, lname;
        fname = "Diablo";
        lname = " Ramirez";
        System.out.println(fname.concat(lname));
    }
}
Output:
What if we concatenate string with an integer?

Well concatenating a string and an integer will give us a string.
Example:
public class string {
    public static void main(String[] args) {
        String name;
        int quantity;
        quantity = 12;
        name = " Apples";
        System.out.println(quantity + name);
    }
}
Output:
12 Apples