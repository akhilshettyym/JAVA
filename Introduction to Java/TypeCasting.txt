Type Casting in Java
Type casting in Java is the process of converting a variable from one data type to another. There are two main types of type casting:

Implicit Type Casting (Widening Conversion)
Explicit Type Casting (Narrowing Conversion)

1️⃣ Implicit Type Casting (Widening Conversion)
Automatically performed by the Java compiler.
Converts a smaller data type to a larger data type.
No data loss occurs.
✅ Example:
public class ImplicitCasting {
    public static void main(String[] args) {
        int num = 10;
        double doubleNum = num;  // int to double (widening)

        System.out.println("Integer value: " + num);
        System.out.println("Double value: " + doubleNum);
    }
}
Output:
Integer value: 10
Double value: 10.0
Supported widening conversions:
byte → short → int → long → float → double


2️⃣ Explicit Type Casting (Narrowing Conversion)
Manually performed by the programmer.
Converts a larger data type to a smaller data type.
Data loss may occur if the value exceeds the target type's range.
✅ Example:
public class ExplicitCasting {
    public static void main(String[] args) {
        double doubleNum = 10.99;
        int intNum = (int) doubleNum;  // double to int (narrowing)

        System.out.println("Double value: " + doubleNum);
        System.out.println("Integer value after casting: " + intNum);
    }
}
Output:
Double value: 10.99
Integer value after casting: 10
Here, the decimal part (.99) is lost because integers cannot store fractional values.

Supported narrowing conversions:
double → float → long → int → short → byte


3️⃣ Type Casting with Characters and ASCII Values
Java allows type casting between characters (char) and numbers (int).

✅ Example:
public class CharToInt {
    public static void main(String[] args) {
        char letter = 'A';
        int asciiValue = letter;  // Implicit casting (char to int)

        System.out.println("Character: " + letter);
        System.out.println("ASCII Value: " + asciiValue);
    }
}
Output:
Character: A
ASCII Value: 65


4️⃣ Type Casting Between Wrapper Classes (Boxing & Unboxing)
Java provides wrapper classes (e.g., Integer, Double) for primitive data types. Type conversion between primitive types and wrapper classes is called boxing and unboxing.

✅ Example:
public class WrapperExample {
    public static void main(String[] args) {
        int num = 100;

        // Boxing (Primitive to Wrapper)
        Integer wrappedNum = num;

        // Unboxing (Wrapper to Primitive)
        int unwrappedNum = wrappedNum;

        System.out.println("Boxed Integer: " + wrappedNum);
        System.out.println("Unboxed Integer: " + unwrappedNum);
    }
}