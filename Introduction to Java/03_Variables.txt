üîπ Java Variables & Data Types
üîπ Variables
A variable stores values like numbers, text, or boolean values.

üìå Syntax:
datatype variableName = value

üìå Example:
int age = 25;           // Integer variable
String name = "John";   // String variable
float price = 99.99f;   // Floating-point variable

What is a Variable?
A variable in Java is a container used to store data. Every variable has a type that determines the kind of data it can hold, such as integers, decimals, characters, or boolean values.

Types of Variables in Java
Java has four types of variables:

Local Variables
Instance Variables (Non-Static)
Static Variables (Class Variables)
Final Variables (Constants)

Local Variables :
Declared inside a method, constructor, or block.
Scope is limited to the method/block where it's declared.
Must be initialized before use (Java does not initialize local variables with default values).

class LocalVariableExample {
    public void display() {
        int localVar = 10; // Local variable (declared inside method)
        System.out.println("Local Variable: " + localVar);
    }

    public static void main(String[] args) {
        LocalVariableExample obj = new LocalVariableExample();
        obj.display();
    }
}


Instance Variables (Non-Static)
Declared inside the class but outside any method.
Each object gets its own copy of instance variables.
They do not require initialization (Java assigns default values).

class InstanceVariableExample {
    int instanceVar = 20; // Instance variable

    public void show() {
        System.out.println("Instance Variable: " + instanceVar);
    }

    public static void main(String[] args) {
        InstanceVariableExample obj1 = new InstanceVariableExample();
        InstanceVariableExample obj2 = new InstanceVariableExample();

        obj1.instanceVar = 30; // Modifying instance variable for obj1 only

        obj1.show(); // Output: 30
        obj2.show(); // Output: 20 (instance variables are separate for each object)
    }
}


Static Variables (Class Variables)
Declared using the static keyword inside a class but outside any method.
Shared among all objects of the class.
Memory is allocated once at class loading time.

class StaticVariableExample {
    static int staticVar = 50; // Static variable (shared among all objects)

    public void show() {
        System.out.println("Static Variable: " + staticVar);
    }

    public static void main(String[] args) {
        StaticVariableExample obj1 = new StaticVariableExample();
        StaticVariableExample obj2 = new StaticVariableExample();

        obj1.staticVar = 100; // Changing staticVar (affects all objects)

        obj1.show(); // Output: 100
        obj2.show(); // Output: 100 (static variable is shared)
    }
}


Final Variables (Constants)
Declared using the final keyword.
Once assigned, cannot be changed.
Typically used for constants.

class FinalVariableExample {
    final int finalVar = 200; // Final variable (constant)

    public void show() {
        System.out.println("Final Variable: " + finalVar);
    }

    public static void main(String[] args) {
        FinalVariableExample obj = new FinalVariableExample();
        obj.show();

        // obj.finalVar = 300; // ‚ùå Error: Cannot change final variable
    }
}

Local variables exist only inside methods and need to be initialized before use.
Instance variables belong to objects and have default values.
Static variables belong to the class and are shared among all instances.
Final variables are constants and cannot be changed after assignment.