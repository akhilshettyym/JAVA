Operators in Java
Operators in Java are symbols that perform operations on variables and values. Java provides several types of operators:

1Ô∏è‚É£ Arithmetic Operators
These are used for mathematical operations.

Operator	Description	Example (a = 10, b = 5)	Output
+	Addition	a + b	15
-	Subtraction	a - b	5
*	Multiplication	a * b	50
/	Division	a / b	2
%	Modulus (Remainder)	a % b	0
‚úÖ Example:
public class ArithmeticOperators {
    public static void main(String[] args) {
        int a = 10, b = 5;
        System.out.println("Addition: " + (a + b));
        System.out.println("Subtraction: " + (a - b));
        System.out.println("Multiplication: " + (a * b));
        System.out.println("Division: " + (a / b));
        System.out.println("Modulus: " + (a % b));
    }
}


2Ô∏è‚É£ Relational (Comparison) Operators
Used to compare values and return a boolean (true or false).

Operator	Description	Example (a = 10, b = 5)	Output
==	Equal to	a == b	false
!=	Not equal to	a != b	true
>	Greater than	a > b	true
<	Less than	a < b	false
>=	Greater than or equal to	a >= b	true
<=	Less than or equal to	a <= b	false
‚úÖ Example:
public class RelationalOperators {
    public static void main(String[] args) {
        int a = 10, b = 5;
        System.out.println(a > b);  // true
        System.out.println(a < b);  // false
        System.out.println(a == b); // false
        System.out.println(a != b); // true
    }
}


3Ô∏è‚É£ Logical Operators
Used to perform logical operations on boolean values.

Operator	Description	Example (a = true, b = false)	Output
&&	Logical AND	a && b	false
`		`	Logical OR
!	Logical NOT	!a	false
‚úÖ Example:
public class LogicalOperators {
    public static void main(String[] args) {
        boolean a = true, b = false;
        System.out.println(a && b);  // false
        System.out.println(a || b);  // true
        System.out.println(!a);      // false
    }
}


4Ô∏è‚É£ Bitwise Operators
Used for binary operations at the bit level.

Operator	Description	Example (a = 5, b = 3)	Output
&	Bitwise AND	a & b	1
`	`	Bitwise OR	`a
^	Bitwise XOR	a ^ b	6
~	Bitwise Complement	~a	-6
<<	Left Shift	a << 1	10
>>	Right Shift	a >> 1	2
‚úÖ Example:
public class BitwiseOperators {
    public static void main(String[] args) {
        int a = 5, b = 3;
        System.out.println(a & b);  // 1
        System.out.println(a | b);  // 7
        System.out.println(a ^ b);  // 6
        System.out.println(~a);     // -6
        System.out.println(a << 1); // 10
        System.out.println(a >> 1); // 2
    }
}


5Ô∏è‚É£ Assignment Operators
Used to assign values to variables.

Operator	Example	Equivalent To
=	a = 10	Assigns 10 to a
+=	a += 5	a = a + 5
-=	a -= 5	a = a - 5
*=	a *= 5	a = a * 5
/=	a /= 5	a = a / 5
%=	a %= 5	a = a % 5
‚úÖ Example:
public class AssignmentOperators {
    public static void main(String[] args) {
        int a = 10;
        a += 5;
        System.out.println("a += 5: " + a);
        a *= 2;
        System.out.println("a *= 2: " + a);
    }
}


6Ô∏è‚É£ Unary Operators
Used with a single operand.

Operator	Description	Example (a = 10)	Output
+	Positive	+a	10
-	Negative	-a	-10
++	Increment	a++	11
--	Decrement	a--	9
‚úÖ Example:
public class UnaryOperators {
    public static void main(String[] args) {
        int a = 10;
        System.out.println(a++);  // 10 (Post-increment)
        System.out.println(++a);  // 12 (Pre-increment)
        System.out.println(a--);  // 12 (Post-decrement)
        System.out.println(--a);  // 10 (Pre-decrement)
    }
}


7Ô∏è‚É£ Ternary Operator
A shorthand for if-else statements.
‚úÖ Syntax:
variable = (condition) ? value_if_true : value_if_false;
‚úÖ Example:
public class TernaryOperator {
    public static void main(String[] args) {
        int a = 10, b = 20;
        int min = (a < b) ? a : b;
        System.out.println("Minimum value: " + min);
    }
}
üîπ Output: Minimum value: 10